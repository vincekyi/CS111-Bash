Vincent Cheung, 603779249
Vincent Kyi, 803916486

Implementation
-We created a command_stream struc that includes a linked list and an iterator.
-Each node in the linked list was called cmd_node, which contains a pointer to a command, a next pointer that 
points to the next node.
- the following notable functions were responsible for the parsing, adding, and reading of commands

notable functions:

make_command_stream:
	this function parses byte by byte, looking for completed commands. once a command is detected, it passes it on to add_command

add_command
	this function adds commands to our data structure recursively. It is responsible for maintaining a working and complete linked list, so that read_command can traverse it properly.

read_command
	this function basically just iterates through the linked list, and increments an iterator so it knows what command is to be considered next.

cleanup
	this function free's all allocated memory - basically the linked list structure we kept our commands in. This was added to main.c



Possible limitations:
	We tried a lot of test cases which came from the spec, and fixed many problems revolving around subcommands and ()'s. Although we fixed everything we caught, there could possibly be more errors involving subcommands.

